<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>SprRing</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//==============================================================================
    animation           = -1;
    animations_old      = -1;
    animations_frame    = 0;
    animations_framemin = 0;
    animations_framemax = 0;
    animations_speed    = 0;
    animations_timer    = 0;
    animations_return   = 0;

    ani_framemin[0]     = 0;
    ani_framemax[0]     = 7;
    ani_return[0]       = 0;
    ani_speed[0]        = 30;

    ani_framemin[1]     = 8;
    ani_framemax[1]     = 8;
    ani_return[1]       = 8;
    ani_speed[1]        = 0;

//==============================================================================
    action     = 0;   // Action start at 0 to shown it's not been collected
    ring_loss  = 0;   // Whether the ring has been lost
    invisible  = 0;   // Insible set to 0 (visibility is flashed when ring loss is true)
    attracted  = 0;   // For electricity shiedl attraction
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Collision Code</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Ring collision checks

with (Player)       // Note with all items, the code is used in the items but it runs through inside the Player
{
    if (action == act_hit || action == act_death || (!other.attracted &amp;&amp; point_distance(x, y, other.x, other.y) &gt; 100)) continue;  // Don't run through code if Player is hit, dead or too far away

    // Move towards Player with elecricity shield
    if (shield == 3)
    {
        other.attracted = 1;
    }

    if (other.attracted)
    {
        if (shield != 3)
        {
            other.attracted = 0;
        }
        else
        {
            with (other)
            {
                move_towards_point(other.x, other.y, 4.5 + point_distance(x, y, other.x, other.y)/15);
            }
        }
    }    

    // Only execute collect action if a collision is going to occur
    if (other.action == 0 &amp;&amp; collision_onset(other.id))
    {
        other.action = 1;
        other.alarm[0] = 8;   // Set the alarm to destroy the ring

        player_ring(1);       // Add 1 ring to the Player
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Ring Loss Code</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Ring Loss Step

if (ring_loss)
{  
    // Set friction to the moving ring speed
    if (hsp &gt; 0)
    {
        hsp -= 0.025;
        if (hsp &lt; 0) hsp = 0;
    }
    if (hsp &lt; 0)
    {
        hsp += 0.025;
        if (hsp &gt; 0) hsp = 0;
    }

    // Add gravity to the ring
    vsp += 0.2;

    // Bounce off of wall when collising with them 
    // -&gt; Note if you used the local hspeed/vspeed variables for the ring you could then use the build-in move_bounce_solid function instead if you wanted
    if (place_meeting(x+hsp, y+vsp, WallParent))
    {
        if (place_meeting(x + hsp, y, WallParent))
            hsp *= -0.65;
        if (place_meeting(x, y + vsp, WallParent))
            vsp *= -0.65;
    }

    // Move the ring based on it's hspeed and vspeed
    x += hsp; y += vsp;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Ring Loss Initialization</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Ring Loss Initialization

    // Decay variables
    decay_count         = 0;    // Start the decay
    decay_life          = 270;  // Time till it's destroyed

    // Set the speed and direction of the rings so they are moving directly away from the Player position
    dir                 = arctan2(Player.y-y, x-Player.x);
    spd                 = 6.4;
    hsp                 = spd*cos(dir) + random(2) - random(2);
    vsp                 = spd*-sin(dir);

    // Move the rings outside of any objects (to make sure they are not created inside walls)
    var i;
    i = 200;
    while (place_meeting(x,y, WallParent) &amp;&amp; i &gt; 0)
    {
        x += hsp;
        y += vsp;
        i -= 1;
    }

    // Set ring_loss variable to true so it knows it's of the ring_loss type
    ring_loss = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Ring Loss Code</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Ring Loss Decay

if (ring_loss)
{
    invisible = 0;
    // Code for the ring decay
    if (decay_count != -1)
    {
        decay_count += 1;
        if (decay_count &gt; decay_life)   // Destroy the ring when the decay time is over
        {
            decay_count = 0;
            instance_destroy();
        }
        if (decay_count &gt; decay_life/2 &amp;&amp; (decay_count div 6) mod 2 != 0)   // Start flashing the ring when half it's life is up 
            invisible = 1;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Standard Animation</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Standard animation

    animation = action;

    //==========================================================
    // Core of the animation system

    // If animation changed, change to the new parameters...
    if (animation != animations_old)
    {
        animations_framemin = ani_framemin[animation];
        animations_framemax = ani_framemax[animation];
        animations_return = ani_return[animation];    
        animations_speed = ani_speed[animation];

        animations_frame = animations_framemin;
        animations_timer = 0;
        animations_old = animation;
    }

    // Add to the timer
    animations_timer += animations_speed

    if (animations_timer &gt;= 100)  // Check if we are ready to change of frame
    {    
        animations_timer = 0;
        animations_frame += 1;
        
        if (animations_frame &gt; animations_framemax)
        {
            animations_frame = animations_return;
        }
    }
    
    if (!invisible)  // Draw normally as long as invisibility is not set
        draw_sprite_ext(sprite_index, animations_frame, x, y, image_xscale, image_yscale, image_angle, c_white, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
