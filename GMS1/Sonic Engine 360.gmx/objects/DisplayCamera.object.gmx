<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>SprDisplayCamera</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>This Is A Controller Object</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// This object is used as the camera and as a general controller object for levels
// It's created in the Player creation event


/*
// Set background music (which you can add yourself)
with (Player)
{
    switch (room)
    {
        case Level0:
            backing_music = SndLevel0;
            player_music(backing_music);
            break;
    }
}
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Display Camera Movement</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Display camera movement (note the view_object is set to this display camera in the Player creation code)

with (Player)
{
    if (action == act_death)  // Death code handled in first code piece, but still need to exit this step code when dead
        return 0;

    if (action == act_lookdown &amp;&amp; camera.ypan &gt;= 0)
        camera.ypan += 4;           // Pan the camera downwards (note the camera pan naturally moves 2 towards the center every step)

    if (action == act_lookup &amp;&amp; camera.ypan &lt;= 0)
        camera.ypan -= 4;           // Pan the camera upwards (note the camera pan naturally moves 2 towards the center every step)

    // Set camera to Player position plus the camera pan (with a leniency of 60 before panning)
    camera.x = x + max(0, abs(camera.xpan) - 60) * sign(camera.xpan);       
    camera.y = y + max(0, abs(camera.ypan) - 60) * sign(camera.ypan);

    // Move the camera pans toward the center each step if they are set
    if (abs(camera.xpan) &gt; 0)
        camera.xpan = max(0, min(abs(camera.xpan) - 2, floor(view_xview/2))) * sign(camera.xpan);
    if (abs(camera.ypan) &gt; 0)
        camera.ypan = max(0, min(abs(camera.ypan) - 2, floor(view_hview/2))) * sign(camera.ypan);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Display Drawing</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Display Drawing (draws the text SCORE, RING and TIME in top left corner, and Life sprite in bottom left)
    
var time_string, minutes, seconds;
with (Player)
{    
    draw_set_font(fnt_display);
    draw_set_color(c_yellow);
    draw_set_halign(fa_left);
    draw_text(view_xview[0]+8, view_yview[0]+8, 'SCORE');
    draw_text(view_xview[0]+8, view_yview[0]+24, 'TIME');

    if (rings == 0)
    {
        if ((current_step div 6) mod 2 != 0)
            draw_set_color(c_yellow);
        else
            draw_set_color(c_red);
    }
    draw_text(view_xview[0]+8, view_yview[0]+40, 'RINGS');

    draw_set_color(c_white);
    draw_text(view_xview[0]+63, view_yview[0]+8, string(scores));
    draw_text(view_xview[0]+63, view_yview[0]+40, string(rings));

    minutes = time_count div 60;
    seconds = floor(time_count - minutes*60);

    if (seconds &lt; 10)
        time_string = string(minutes)+':0'+string(seconds);
    else
        time_string = string(minutes)+':'+string(seconds);

    draw_text(view_xview[0]+63, view_yview[0]+24, time_string);

    draw_sprite(SprLifeDisplay, 0, view_xview[0]+20, view_yview[0]+view_hview[0]-20);
    draw_set_font(fnt_normal);
    draw_text(view_xview[0]+46, view_yview[0]+view_hview[0]-20, string(life));

    if (fps != 0)
        time_count += (1/fps);

    current_step += 1;
    if (current_step mod 120 == 0)
        room_caption = "fsp: " + string(fps);

    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="82">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Debug Restart Key</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Debug restart key

room_restart();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="81">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Execute LevelBaker</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Test procedure for the LevelBaker

instance_create(0, 0, LevelBaker);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
