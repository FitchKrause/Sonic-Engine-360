<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>SprBox</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>2</depth>
  <persistent>0</persistent>
  <parentName>SolidParent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//==============================================================================
    action              = 0;                    // Start action not destroyed
    bounce_factor       = 0.65;                 // Factor of player speed to add to momentum
    flash_count         = 0;                    // Counter for flashing the icon
    explosion_count     = 0;                    // Counter used for the explosion
    icon_speed          = 2.3;                  // Speed of the icon going up
    icon_y              = -6;                   // Position of the icon

    box_type            = floor(random(9));     // Type of box it is, you can make new child objects to set this or set it in the room creation code

    //Box Types
    /*
        0 - Life
        1 - Eggman
        2 - Ring
        3 - Shield Basic
        4 - Shield Fire
        5 - Shield Electricity
        6 - Shield Water
        7 - Invincibility
        8 - Sneekers
    */
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Collision Code</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Box collision checks

var vspd_set;

with (Player)       // Note with all items, the code is used in the items but it runs through inside the Player
{
    if (action == act_death || point_distance(x, y, other.x, other.y) &gt; 100) continue;  // Don't run through code if Player is dead or too far away

    // Set solid if Player isn't rolling and the box isn't destroyed (set non-solid otherwise)
    other.solid = (action != act_roll &amp;&amp; other.action == 0);

    // Only execute hit action if non-solid and a collision is going to occur
    if (other.solid == false &amp;&amp; collision_onset(other.id) &amp;&amp; other.action == 0)
    {
        if (full_vspeed &gt; 0)   // If the Player is moving downwards then going to bounce off the box
        {
            vspd_set = full_vspeed*-other.bounce_factor;    // Get the vspeed to bounce up at (note this is dependent on the Player's original vspeed)
            vsp = vspd_set;                                 // Now set the Player vspeed to this value
        }
        other.action = 1;                     // Set the box action to 1 to show it has been destroyed
        player_box_action(other.box_type);    // Script to make the box powerup action occur   
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Draw the box animation depending on the current action

    switch (action)
    {

    // Standard box
    case 0:
        draw_sprite_ext(sprite_index, 0, x, y, image_xscale, image_yscale, image_angle, c_white, 1);
        if ((flash_count div 3) mod 2 != 0)
            draw_sprite_ext(SprBoxIcons, box_type, x, y + icon_y, image_xscale, image_yscale, image_angle, c_white, 1);
        flash_count += 1;
        break;

    // Box while exploding
    case 1:
        draw_sprite_ext(sprite_index, 1, x, y, image_xscale, image_yscale, image_angle, c_white, 1);

        if (explosion_count != -1)
        {
            if (explosion_count &gt;= 5 * 8)    // image_number * animation_speed
            {
                explosion_count = -1;
            }
            else
            {
                draw_sprite_ext(SprExplosion, explosion_count div 8, x, y, image_xscale, image_yscale, image_angle, c_white, 1);
                explosion_count += 1;
            }
        }

        if (icon_speed &lt; 0.01)
        {
            icon_speed = 0;
        }
        else
        {
            icon_y -= icon_speed;
            draw_sprite_ext(SprBoxIcons, box_type, x, y + icon_y, image_xscale, image_yscale, image_angle, c_white, icon_speed);
            icon_speed *= 0.95;
        }

        if (explosion_count == -1 &amp;&amp; icon_speed == 0)  // If explosion and icon rise is over then set action to 2
            action = 2;
        break;

    // Final box
    case 2:
        draw_sprite_ext(sprite_index, 1, x, y, image_xscale, image_yscale, image_angle, c_white, 1);
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
